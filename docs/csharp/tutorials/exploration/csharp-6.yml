### YamlMime:Tutorial
title: Explorar C# 6 (Tutorial interactivo de C#)
metadata:
  title: 'Explorar C# 6: pruebe las nuevas características de C# 6 de forma interactiva, mediante el explorador'
  description: En este tutorial se usa el explorador para examinar C# 6 de forma interactiva. Se estudian los nuevos giros que se pueden usar con C# 6 y que permiten que el código sea más conciso y legible.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  ms.topic: interactive-tutorial
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1dfd9dba60f21cf80e53ac1e9735859cb567797d
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88268106"
items:
- durationInMinutes: 1
  content: >
    Este tutorial permite examinar C# 6 de forma interactiva, mediante el uso del explorador para escribir C# y ver los resultados de la compilación y la ejecución del código. Contiene una serie de lecciones que modifican procedimientos antiguos de C# para usar características más recientes y concisas de C# 6. El resto de este artículo proporciona información general de cada una de estas características, con un vínculo para examinar cada una.
- title: Propiedades automáticas de solo lectura que habilitan tipos de solo lectura
  durationInMinutes: 2
  content: "Dos mejoras en la sintaxis de las propiedades automáticas facilitan su uso en más ubicaciones: propiedades automáticas de solo lectura e inicializadores de propiedades automáticas. Observe este pequeño programa:\n\n[!code-csharp[Starter](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n Entre en el modo de enfoque y copie el código anterior en la ventana interactiva de C#. Luego, seleccione *Ejecutar* para ver lo que hace el código. `AllCaps` tiene el efecto secundario no deseado de modificar los valores de propiedad, además de devolver la cadena en mayúsculas. El autor de la clase `Person` intentaba que las cadenas de `FirstName` y `LastName` fueran de solo lectura. Con C# 6, esa intención puede quedar más clara. Quite `private set` de ambas propiedades para crear una propiedad automática de solo lectura. Seleccione *Ejecutar* para ver que el compilador detecta las dos ubicaciones donde las propiedades `FirstName` y `LastName` se cambian si no deben estar ahí. Puede cambiar el método `AllCaps` por el código siguiente para corregir el error del compilador:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nCon esta nueva sintaxis, el compilador se asegura de que las propiedades sean inmutables.\n"
- title: Inicialización de campos de respaldo de propiedades automáticas
  durationInMinutes: 1
  content: "La nueva sintaxis de C# 6 permite usar inicializadores para propiedades automáticas. Esto se vuelve más importante a medida que las clases incorporan nuevas funcionalidades. Agregue una propiedad de segundo nombre y un nuevo constructor que tome tres cadenas a la clase `Person`:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\nLa asignación en la propiedad `MiddleName` es un inicializador. Inicializa el campo de respaldo generado por el compilador para el segundo nombre.\n"
- title: Miembros con forma de expresión
  durationInMinutes: 2
  content: >
    Los miembros con forma de expresión proporcionan una sintaxis ligera para métodos ligeros. La clase `Person` tiene dos magníficos candidatos. Examine la declaración de `ToString`:


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Reemplace la declaración de `ToString` por el siguiente código:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    Intente lo mismo con el método `AllCaps`. Esto supone una pequeña mejora, pero si se usa de forma sensata crea código mucho más legible, especialmente para objetos de transferencia de datos (DTO) y otros tipos con comportamiento mínimo.
- title: Importación de una sola clase
  durationInMinutes: 2
  content: "Si usa los métodos estáticos de una clase de forma repetida por el código, la inclusión del nombre de clase cada vez oscurece el significado del código. La clase `Person` actualmente importa el espacio de nombres `System`, aunque solo se use <xref:System.Console?displayProperty=nameWithType>. Modifique la instrucción `using` como se indica:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\nLa instrucción `static using` es más útil en programas más grandes que usan mucho una sola clase con muchos métodos estáticos, como la clase [`string`](xref:System.String) o la clase <xref:System.Math?displayProperty=nameWithType>.\n"
- title: Un mejor formato de cadena
  durationInMinutes: 2
  content: "C# 6 contiene nueva sintaxis para crear cadenas a partir de una cadena y expresiones insertadas que se evalúan para generar otros valores de cadena. Puede cambiar los métodos `ToString` y `AllCaps` para usar esta sintaxis:\n\n[!code-csharp[StringInterpolation](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\nEn lugar de argumentos posicionales entre `{` y `}`, se escriben directamente expresiones de C#. Puede hacer lo mismo en el método `Main`. Reemplace el código existente por el siguiente:\n\n[!code-csharp[InterpolationMain](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\nNo está limitado a una única variable en estas expresiones. Vamos a comenzar con un nuevo ejemplo y a modificarlo para mostrar otras expresiones que se pueden usar con la interpolación de cadenas. Pegue el código siguiente en la ventana interactiva, en el método `Main`:\n\n[!code-csharp[Phrases](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \nComo usa LINQ, deberá agregar la siguiente instrucción using en la parte superior de la ventana interactiva:\n\n```csharp\nusing System.Linq;\n```\n\nPuede quitar la variable local `average` y realizar el cálculo como parte de la expresión de cadena interpolada. Reemplace las dos últimas líneas por lo siguiente:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\nAl ejecutar el ejemplo anterior, encontrará que la salida de `Average` tiene más posiciones decimales de las que querría. La sintaxis de interpolación de cadena admite todas las cadenas de formato disponibles mediante el uso de los métodos de formato anteriores. La cadena de formato se especifica entre las llaves. Agregue un signo `:` después de la expresión a la que se va a dar formato:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: Comprobaciones NULL rápidas y sencillas
  durationInMinutes: 2
  content: "El operador `?.` (condicional NULL) facilita la escritura de lógica que tiene en cuenta valores `null` sin problemas, sin comprobaciones `if` adicionales. Para examinar la característica, comience por copiar el código siguiente en la ventana interactiva para probarlo:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nProduce una excepción <xref:System.NullReferenceException> al ejecutar el ejemplo. Cambie el operador de acceso a miembros `.` por el **operador condicional NULL**:\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nDespués de este cambio, no hay salida. Esto se debe a que el resultado de `s?.Length` es `int?` cuando el resultado de `s.Length` es `int`. En este ejemplo, `s?.Length` es `null`. `?.` devuelve `null` si el operando izquierdo es `null`. El operador `?.` devuelve un tipo que acepta valores NULL para ese tipo, tanto para los tipos de valor como para los tipos de referencia que no aceptan valores NULL. Además de `?.`, puede usar `?[]` para el acceso de matriz o indizador. Pruebe el código siguiente en la ventana interactiva:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Se pueden combinar varios operadores condicionales en una sola expresión. Un operando izquierdo `null` genera un resultado `null`, lo que permite evitar fácilmente cláusulas if anidadas para acceder a miembros de miembros. Por ejemplo, pruebe el código siguiente en la ventana interactiva:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue && hasMore.Value);\n ```\n\n El ejemplo anterior se puede simplificar mediante el **operador de fusión NULL** para proporcionar un valor predeterminado:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n El **operador condicional NULL** ayuda a escribir código que aclara la lógica principal a la vez que prueba sin problemas valores `null`.\n"
- title: Filtros de excepciones
  durationInMinutes: 2
  content: "Los filtros de excepciones permiten detectar una excepción en función de alguna condición. Un uso típico es crear un método de filtro que registre excepciones, pero que nunca las controle. Un filtro de excepciones es una expresión booleana que es `true` si se debe ejecutar la cláusula `catch` y `false` si cláusula `catch` no debe detectar la excepción. Pruebe el código siguiente en la ventana interactiva: Registra el tipo de excepción y el mensaje en la consola. Devuelve `false`, lo que indica que no se puede controlar la excepción. Pruebe el programa en la ventana interactiva.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\nDebería ver el mensaje del método `LogException`, seguido por el mensaje de excepción predeterminado. Solo para experimentar, cambie la instrucción `return false` por `return true` y vuelva a ejecutar. Ahora se detecta la excepción y se ejecuta el programa hasta su finalización.\n\nMás allá de los escenarios de registro, los filtros de excepciones pueden ser más útiles cuando una propiedad de la excepción determina qué acción realizar. Por ejemplo, puede buscar en <xref:System.AggregateException> para ver cuáles son las excepciones incluidas y realizar alguna acción adecuada en función de la excepción concreta.\n"
- title: Uso de nameof
  durationInMinutes: 2
  content: "El operador `nameof` devuelve el nombre de cualquier variable o tipo, o bien un miembro de un tipo. Pruebe el código siguiente en la ventana interactiva para ver cómo funciona:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nLa salida coincide con el nombre de la variable o el tipo. Aunque haya proporcionado el nombre de tipo completo (como `System.String`), el operador `nameof` devuelve el nombre no completo. Esta característica resulta especialmente útil cuando es necesario convertir un nombre de parámetro o propiedad en una cadena. Los ejemplos incluyen la captura del nombre de un argumento para producir una excepción <xref:System.ArgumentNullException> o <xref:System.ArgumentException>, o la captura del nombre de una propiedad modificada al implementar <xref:System.ComponentModel.INotifyPropertyChanged>. \n"
- title: Nueva sintaxis de inicialización de objetos
  durationInMinutes: 2
  content: "La sintaxis de inicializador de objeto ahora admite la inicialización de *indizadores*, así como de propiedades y campos. Esta adición facilita la inicialización de diccionarios y otros tipos. Comience por un diccionario. Ejecute el código siguiente en la ventana interactiva:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nEsta sintaxis, que establece un valor en un indizador, puede usarse para cualquier tipo que tenga un descriptor de acceso o un indizador accesible.\n\nUn segundo cambio facilita la habilitación de la sintaxis de inicializador para tipos que representan secuencias. Los inicializadores de colección se pueden usar en cualquier clase que implemente <xref:System.Collections.IEnumerable> y tenga un método `Add` accesible públicamente. Ese método `Add` ahora puede ser un método de extensión. \n\nEl ejemplo siguiente muestra un escenario de esta sintaxis. Crea una clase `Path` que implementa `IEnumerable<Point3D>` y tiene un método para agregar puntos que toman tres argumentos. La clase `Extensions` crea un método `Add` adicional para agregar un nuevo punto desde sus tres componentes. Este ejemplo de momento no se ejecuta de forma interactiva debido a restricciones en el entorno.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: Ha terminado de examinar las nuevas características de C# 6. Ahora pruébelas en sus aplicaciones.
